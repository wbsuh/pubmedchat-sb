{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule, MessageFilter, MessageCollectionInitPolicy } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.handleUserIdChange = event => {\n      this.setState({\n        userId: event.target.value\n      });\n    };\n    this.handleLogin = async () => {\n      const {\n        userId\n      } = this.state;\n      if (userId.trim()) {\n        try {\n          await this.sb.connect(userId);\n          this.setState({\n            isConnected: true\n          });\n        } catch (error) {\n          console.error('Sendbird Connection Error:', error);\n        }\n      }\n    };\n    this.connectToSenbird = async userId => {\n      try {\n        await this.sb.connect(userId);\n        // ... after successful connection\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createOpenChannel = async () => {\n      const params = {\n        name: \"My Open Channel\",\n        coverUrlOrImage: \"http://example.com/cover.jpg\",\n        operatorUserIds: [\"wonbae\"],\n        data: \"Additional information about the channel\",\n        customType: \"my_custom_type\"\n      };\n      try {\n        const channel = await this.sb.openChannel.createChannel(params);\n        console.log(\"Open channel created:\", channel);\n        await channel.enter();\n        this.channel = channel; // Set the current channel context\n      } catch (error) {\n        console.error(\"Error creating or entering open channel:\", error);\n      }\n    };\n    this.createGroupChannel = async () => {\n      const params = {\n        invitedUserIds: ['min', 'wonbae'],\n        name: \"My Group Channel\",\n        coverUrl: \"http://example.com/cover.jpg\",\n        operatorUserIds: ['wonbae'],\n        isDistinct: true\n      };\n      try {\n        const channel = await this.sb.groupChannel.createChannel(params);\n        console.log(\"Group channel created:\", channel);\n        this.channel = channel; // Set the current channel context\n        console.log(\"Successfully set this.channel to the newly created group channel.\");\n      } catch (error) {\n        console.error(\"Error creating group channel:\", error);\n      }\n    };\n    this.sendMessage = async (textMessage, customType = '', data = '') => {\n      if (!this.channel) {\n        console.error('Channel is not defined.');\n        return;\n      }\n      const params = {\n        message: textMessage,\n        customType: customType,\n        data: data\n      };\n      try {\n        this.channel.sendUserMessage(params).onSucceeded(message => {\n          const formattedMessage = {\n            messageId: message.messageId,\n            text: message.message,\n            senderId: message.sender.userId,\n            createdAt: message.createdAt,\n            nickname: message.sender.nickname\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        }).onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.initializeMessageCollection = async channel => {\n      const filter = new MessageFilter();\n      const limit = 100;\n      const startingPoint = Date.now();\n      const messageCollection = channel.createMessageCollection({\n        filter,\n        limit,\n        startingPoint\n      });\n      await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API).onCacheResult((err, messages) => {\n        console.log(\"Cache result:\", messages);\n        if (!err) {\n          this.setState({\n            messages: messages.reverse()\n          }); // Assuming messages are added to state in reverse order for display\n        } else {\n          console.error(\"Error retrieving messages from cache:\", err);\n        }\n      }).onApiResult((err, messages) => {\n        console.log(\"API result:\", messages);\n        if (!err) {\n          this.setState({\n            messages: messages.reverse()\n          }); // Update state with latest messages\n        } else {\n          console.error(\"Error retrieving messages from API:\", err);\n        }\n      });\n      this.setState({\n        messageCollection\n      });\n      console.log(\"MessageCollection initialized for channel:\", channel);\n    };\n    this.loadPreviousMessages = async () => {\n      const {\n        messageCollection\n      } = this.state;\n      if (messageCollection && messageCollection.hasPrevious) {\n        console.log(\"Loading previous messages\");\n        const messages = await messageCollection.loadPrevious();\n        console.log(\"Previous messages loaded:\", messages);\n        this.setState(prevState => ({\n          messages: [...messages.reverse(), ...prevState.messages] // Prepend older messages\n        }));\n      } else {\n        console.log(\"No previous messages to load or MessageCollection not initialized\");\n      }\n    };\n    this.state = {\n      messages: [],\n      channelType: null,\n      userId: '',\n      // To be inputted by the user\n      isConnected: false,\n      messages: [],\n      messageCollection: null\n    };\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()]\n    });\n  }\n  renderChannelTypeSelection() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'open'\n        }, this.createOpenChannel),\n        children: \"Open Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'group'\n        }, this.createGroupChannel),\n        children: \"Group Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    const {\n      isConnected,\n      channelType,\n      messages,\n      userId\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), !isConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter user ID\",\n          value: userId,\n          onChange: this.handleUserIdChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleLogin,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), isConnected && !channelType && this.renderChannelTypeSelection(), isConnected && channelType && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n          sendMessage: this.sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","GroupChannelModule","MessageFilter","MessageCollectionInitPolicy","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","handleUserIdChange","event","setState","userId","target","value","handleLogin","state","trim","sb","connect","isConnected","error","console","connectToSenbird","createOpenChannel","params","name","coverUrlOrImage","operatorUserIds","data","customType","channel","openChannel","createChannel","log","enter","createGroupChannel","invitedUserIds","coverUrl","isDistinct","groupChannel","sendMessage","textMessage","message","sendUserMessage","onSucceeded","formattedMessage","messageId","text","senderId","sender","createdAt","nickname","prevState","messages","onFailed","initializeMessageCollection","filter","limit","startingPoint","Date","now","messageCollection","createMessageCollection","initialize","CACHE_AND_REPLACE_BY_API","onCacheResult","err","reverse","onApiResult","loadPreviousMessages","hasPrevious","loadPrevious","channelType","init","appId","modules","renderChannelTypeSelection","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","render","className","type","placeholder","onChange"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule,  MessageFilter, MessageCollectionInitPolicy } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      channelType: null,\n      userId: '', // To be inputted by the user\n      isConnected: false,\n      messages: [],\n      messageCollection: null,  \n    };\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()],\n    });\n  }\n\n  handleUserIdChange = (event) => {\n    this.setState({ userId: event.target.value });\n  };\n\n  handleLogin = async () => {\n    const { userId } = this.state;\n    if (userId.trim()) {\n      try {\n        await this.sb.connect(userId);\n        this.setState({ isConnected: true });\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    }\n  };\n\n  connectToSenbird = async (userId) => {\n    try {\n      await this.sb.connect(userId);\n      // ... after successful connection\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createOpenChannel = async () => {\n    const params = {\n      name: \"My Open Channel\",\n      coverUrlOrImage: \"http://example.com/cover.jpg\",\n      operatorUserIds: [\"wonbae\"],\n      data: \"Additional information about the channel\",\n      customType: \"my_custom_type\"\n    };\n\n    try {\n      const channel = await this.sb.openChannel.createChannel(params);\n      console.log(\"Open channel created:\", channel);\n      await channel.enter();\n      this.channel = channel; // Set the current channel context\n    } catch (error) {\n      console.error(\"Error creating or entering open channel:\", error);\n    }\n  };\n\n  createGroupChannel = async () => {\n    const params = {\n      invitedUserIds: ['min','wonbae'], \n      name: \"My Group Channel\",\n      coverUrl: \"http://example.com/cover.jpg\",\n      operatorUserIds: ['wonbae'], \n      isDistinct: true,\n    };\n  \n    try {\n      const channel = await this.sb.groupChannel.createChannel(params);\n      console.log(\"Group channel created:\", channel);\n      this.channel = channel; // Set the current channel context\n      console.log(\"Successfully set this.channel to the newly created group channel.\");\n    } catch (error) {\n      console.error(\"Error creating group channel:\", error);\n    }\n  };\n\n  sendMessage = async (textMessage, customType = '', data = '') => {\n    if (!this.channel) {\n      console.error('Channel is not defined.');\n      return;\n    }\n\n    const params = {\n      message: textMessage,\n      customType: customType,\n      data: data,\n    };\n\n    try {\n      this.channel.sendUserMessage(params)\n        .onSucceeded((message) => {\n          const formattedMessage = {\n            messageId: message.messageId,\n            text: message.message,\n            senderId: message.sender.userId,\n            createdAt: message.createdAt,\n            nickname: message.sender.nickname,\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        })\n        .onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n\n  renderChannelTypeSelection() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ channelType: 'open' }, this.createOpenChannel)}>Open Channel</button>\n        <button onClick={() => this.setState({ channelType: 'group' }, this.createGroupChannel)}>Group Channel</button>\n      </div>\n    );\n  }\n\n  initializeMessageCollection = async (channel) => {\n    const filter = new MessageFilter();\n    const limit = 100;\n    const startingPoint = Date.now();\n    const messageCollection = channel.createMessageCollection({\n      filter,\n      limit,\n      startingPoint,\n    });\n  \n    await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n      .onCacheResult((err, messages) => {\n        console.log(\"Cache result:\", messages);\n        if (!err) {\n          this.setState({ messages: messages.reverse() }); // Assuming messages are added to state in reverse order for display\n        } else {\n          console.error(\"Error retrieving messages from cache:\", err);\n        }\n      })\n      .onApiResult((err, messages) => {\n        console.log(\"API result:\", messages);\n        if (!err) {\n          this.setState({ messages: messages.reverse() }); // Update state with latest messages\n        } else {\n          console.error(\"Error retrieving messages from API:\", err);\n        }\n      });\n  \n    this.setState({ messageCollection });\n  \n    console.log(\"MessageCollection initialized for channel:\", channel);\n  };\n  \n  loadPreviousMessages = async () => {\n    const { messageCollection } = this.state;\n    if (messageCollection && messageCollection.hasPrevious) {\n      console.log(\"Loading previous messages\");\n      const messages = await messageCollection.loadPrevious();\n      console.log(\"Previous messages loaded:\", messages);\n      this.setState(prevState => ({\n        messages: [...messages.reverse(), ...prevState.messages], // Prepend older messages\n      }));\n    } else {\n      console.log(\"No previous messages to load or MessageCollection not initialized\");\n    }\n  };\n  \n  render() {\n    const { isConnected, channelType, messages, userId } = this.state;\n    return (\n      <div className=\"app\">\n        <Title />\n        {!isConnected && (\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Enter user ID\"\n              value={userId}\n              onChange={this.handleUserIdChange}\n            />\n            <button onClick={this.handleLogin}>Login</button>\n          </div>\n        )}\n        {isConnected && !channelType && this.renderChannelTypeSelection()}\n        {isConnected && channelType && (\n          <>\n            <MessageList messages={messages} />\n            <SendMessageForm sendMessage={this.sendMessage} />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}