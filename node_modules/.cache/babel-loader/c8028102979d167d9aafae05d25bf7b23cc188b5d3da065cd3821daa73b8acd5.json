{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule } from '@sendbird/chat/groupChannel';\nimport { GroupChannelFilter, GroupChannelCollection, GroupChannelListOrder } from '@sendbird/chat';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.connectToSenbird = async userId => {\n      try {\n        await this.sb.connect(userId);\n        this.fetchOpenChannels();\n        this.initGroupChannelCollection();\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.fetchOpenChannels = async () => {\n      const query = this.sb.openChannel.createOpenChannelListQuery();\n      if (query.hasNext) {\n        const channels = await query.next();\n        this.setState({\n          openChannels: channels\n        });\n      }\n    };\n    this.initGroupChannelCollection = () => {\n      const groupChannelFilter = new GroupChannelFilter();\n      groupChannelFilter.includeEmpty = true;\n      const params = {\n        filter: groupChannelFilter,\n        order: GroupChannelListOrder.LATEST_LAST_MESSAGE\n      };\n      this.groupChannelCollection = this.sb.groupChannel.createGroupChannelCollection(params);\n      this.setGroupChannelCollectionHandler();\n\n      // Load initial group channels\n      this.fetchGroupChannels();\n    };\n    this.fetchGroupChannels = async () => {\n      if (this.groupChannelCollection.hasMore) {\n        const channels = await this.groupChannelCollection.loadMore();\n        this.setState({\n          groupChannels: channels\n        });\n      }\n    };\n    this.setGroupChannelCollectionHandler = () => {\n      const handler = {\n        onChannelsAdded: (context, channels) => {\n          this.setState(prevState => ({\n            groupChannels: [...prevState.groupChannels, ...channels]\n          }));\n        },\n        onChannelsUpdated: (context, channels) => {\n          // Update channels in state\n        },\n        onChannelsDeleted: (context, channelUrls) => {\n          // Remove channels from state\n        }\n      };\n      this.groupChannelCollection.setGroupChannelCollectionHandler(handler);\n    };\n    this.createOpenChannel = async () => {\n      const params = {\n        name: \"My Open Channel\",\n        coverUrlOrImage: \"http://example.com/cover.jpg\",\n        operatorUserIds: [\"wonbae\"],\n        data: \"Additional information about the channel\",\n        customType: \"my_custom_type\"\n      };\n      try {\n        const channel = await this.sb.openChannel.createChannel(params);\n        console.log(\"Open channel created:\", channel);\n        await channel.enter();\n        this.channel = channel; // Set the current channel context\n      } catch (error) {\n        console.error(\"Error creating or entering open channel:\", error);\n      }\n    };\n    this.createGroupChannel = async () => {\n      const params = {\n        invitedUserIds: ['min'],\n        name: \"My Group Channel\",\n        coverUrl: \"http://example.com/cover.jpg\",\n        operatorUserIds: ['wonbae'],\n        isDistinct: true\n      };\n      try {\n        const channel = await this.sb.groupChannel.createChannel(params);\n        console.log(\"Group channel created:\", channel);\n        this.channel = channel; // Set the current channel context\n        console.log(\"Successfully set this.channel to the newly created group channel.\");\n      } catch (error) {\n        console.error(\"Error creating group channel:\", error);\n      }\n    };\n    this.sendMessage = async (textMessage, customType = '', data = '') => {\n      if (!this.channel) {\n        console.error('Channel is not defined.');\n        return;\n      }\n      const params = {\n        message: textMessage,\n        customType: customType,\n        data: data\n      };\n      try {\n        this.channel.sendUserMessage(params).onSucceeded(message => {\n          const formattedMessage = {\n            messageId: message.messageId,\n            text: message.message,\n            senderId: message.sender.userId,\n            createdAt: message.createdAt,\n            nickname: message.sender.nickname\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        }).onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.toggleChannelList = () => {\n      this.setState(prevState => ({\n        showChannelList: !prevState.showChannelList\n      }));\n    };\n    this.state = {\n      messages: [],\n      openChannels: [],\n      groupChannels: [],\n      showChannelList: false,\n      channelType: null // 'open' or 'group', null until selected\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()]\n    });\n  }\n  async componentDidMount() {\n    await this.connectToSenbird('wonbae');\n  }\n  componentWillUnmount() {\n    if (this.groupChannelCollection) {\n      this.groupChannelCollection.dispose();\n    }\n  }\n  renderChannelList() {\n    const {\n      openChannels,\n      groupChannels\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Open Channels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: openChannels.map(ch => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: ch.name\n        }, ch.url, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Group Channels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: groupChannels.map(ch => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: ch.name\n        }, ch.url, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 38\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this);\n  }\n  renderChannelTypeSelection() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'open'\n        }),\n        children: \"Open Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'group'\n        }),\n        children: \"Group Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    const {\n      channelType,\n      showChannelList\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), this.renderChannelTypeSelection(), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.toggleChannelList,\n        children: showChannelList ? 'Hide Channels' : 'Show Channels'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), showChannelList && this.renderChannelList(), channelType && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: this.state.messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n          sendMessage: this.sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","GroupChannelModule","GroupChannelFilter","GroupChannelCollection","GroupChannelListOrder","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","connectToSenbird","userId","sb","connect","fetchOpenChannels","initGroupChannelCollection","error","console","query","openChannel","createOpenChannelListQuery","hasNext","channels","next","setState","openChannels","groupChannelFilter","includeEmpty","params","filter","order","LATEST_LAST_MESSAGE","groupChannelCollection","groupChannel","createGroupChannelCollection","setGroupChannelCollectionHandler","fetchGroupChannels","hasMore","loadMore","groupChannels","handler","onChannelsAdded","context","prevState","onChannelsUpdated","onChannelsDeleted","channelUrls","createOpenChannel","name","coverUrlOrImage","operatorUserIds","data","customType","channel","createChannel","log","enter","createGroupChannel","invitedUserIds","coverUrl","isDistinct","sendMessage","textMessage","message","sendUserMessage","onSucceeded","formattedMessage","messageId","text","senderId","sender","createdAt","nickname","messages","onFailed","toggleChannelList","showChannelList","state","channelType","init","appId","modules","componentDidMount","componentWillUnmount","dispose","renderChannelList","children","fileName","_jsxFileName","lineNumber","columnNumber","map","ch","url","renderChannelTypeSelection","onClick","render","className"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule } from '@sendbird/chat/groupChannel';\nimport { GroupChannelFilter, GroupChannelCollection, GroupChannelListOrder } from '@sendbird/chat';\n\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      openChannels: [],\n      groupChannels: [],\n      showChannelList: false,\n      channelType: null, // 'open' or 'group', null until selected\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()],\n    });\n  }\n\n  async componentDidMount() {\n    await this.connectToSenbird('wonbae');\n  }\n\n  connectToSenbird = async (userId) => {\n    try {\n      await this.sb.connect(userId);\n      this.fetchOpenChannels();\n      this.initGroupChannelCollection();\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  fetchOpenChannels = async () => {\n    const query = this.sb.openChannel.createOpenChannelListQuery();\n    if (query.hasNext) {\n      const channels = await query.next();\n      this.setState({ openChannels: channels });\n    }\n  };\n\n  initGroupChannelCollection = () => {\n    const groupChannelFilter = new GroupChannelFilter();\n    groupChannelFilter.includeEmpty = true;\n\n    const params = {\n      filter: groupChannelFilter,\n      order: GroupChannelListOrder.LATEST_LAST_MESSAGE,\n    };\n\n    this.groupChannelCollection = this.sb.groupChannel.createGroupChannelCollection(params);\n    this.setGroupChannelCollectionHandler();\n\n    // Load initial group channels\n    this.fetchGroupChannels();\n  };\n\n  fetchGroupChannels = async () => {\n    if (this.groupChannelCollection.hasMore) {\n      const channels = await this.groupChannelCollection.loadMore();\n      this.setState({ groupChannels: channels });\n    }\n  };\n\n  setGroupChannelCollectionHandler = () => {\n    const handler = {\n      onChannelsAdded: (context, channels) => {\n        this.setState(prevState => ({\n          groupChannels: [...prevState.groupChannels, ...channels]\n        }));\n      },\n      onChannelsUpdated: (context, channels) => {\n        // Update channels in state\n      },\n      onChannelsDeleted: (context, channelUrls) => {\n        // Remove channels from state\n      },\n    };\n    this.groupChannelCollection.setGroupChannelCollectionHandler(handler);\n  };\n\n  componentWillUnmount() {\n    if (this.groupChannelCollection) {\n      this.groupChannelCollection.dispose();\n    }\n  }\n\n  createOpenChannel = async () => {\n    const params = {\n      name: \"My Open Channel\",\n      coverUrlOrImage: \"http://example.com/cover.jpg\",\n      operatorUserIds: [\"wonbae\"],\n      data: \"Additional information about the channel\",\n      customType: \"my_custom_type\"\n    };\n\n    try {\n      const channel = await this.sb.openChannel.createChannel(params);\n      console.log(\"Open channel created:\", channel);\n      await channel.enter();\n      this.channel = channel; // Set the current channel context\n    } catch (error) {\n      console.error(\"Error creating or entering open channel:\", error);\n    }\n  };\n\n  createGroupChannel = async () => {\n    const params = {\n      invitedUserIds: ['min'], \n      name: \"My Group Channel\",\n      coverUrl: \"http://example.com/cover.jpg\",\n      operatorUserIds: ['wonbae'], \n      isDistinct: true,\n    };\n  \n    try {\n      const channel = await this.sb.groupChannel.createChannel(params);\n      console.log(\"Group channel created:\", channel);\n      this.channel = channel; // Set the current channel context\n      console.log(\"Successfully set this.channel to the newly created group channel.\");\n    } catch (error) {\n      console.error(\"Error creating group channel:\", error);\n    }\n  };\n\n  sendMessage = async (textMessage, customType = '', data = '') => {\n    if (!this.channel) {\n      console.error('Channel is not defined.');\n      return;\n    }\n\n    const params = {\n      message: textMessage,\n      customType: customType,\n      data: data,\n    };\n\n    try {\n      this.channel.sendUserMessage(params)\n        .onSucceeded((message) => {\n          const formattedMessage = {\n            messageId: message.messageId,\n            text: message.message,\n            senderId: message.sender.userId,\n            createdAt: message.createdAt,\n            nickname: message.sender.nickname,\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        })\n        .onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n\n  toggleChannelList = () => {\n    this.setState(prevState => ({\n      showChannelList: !prevState.showChannelList\n    }));\n  };\n\n  renderChannelList() {\n    const { openChannels, groupChannels } = this.state;\n    return (\n      <div>\n        <h3>Open Channels</h3>\n        <ul>\n          {openChannels.map((ch) => <li key={ch.url}>{ch.name}</li>)}\n        </ul>\n        <h3>Group Channels</h3>\n        <ul>\n          {groupChannels.map((ch) => <li key={ch.url}>{ch.name}</li>)}\n        </ul>\n      </div>\n    );\n  }\n\n  renderChannelTypeSelection() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ channelType: 'open' })}>Open Channel</button>\n        <button onClick={() => this.setState({ channelType: 'group' })}>Group Channel</button>\n      </div>\n    );\n  }\n\n  render() {\n    const { channelType, showChannelList } = this.state;\n    return (\n      <div className=\"app\">\n        <Title />\n        {this.renderChannelTypeSelection()}\n        <button onClick={this.toggleChannelList}>\n          {showChannelList ? 'Hide Channels' : 'Show Channels'}\n        </button>\n        {showChannelList && this.renderChannelList()}\n        {channelType && (\n          <>\n            <MessageList messages={this.state.messages} />\n            <SendMessageForm sendMessage={this.sendMessage} />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}