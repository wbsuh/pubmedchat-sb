{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule, MessageFilter, MessageCollectionInitPolicy, GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.handleUserIdChange = event => {\n      this.setState({\n        userId: event.target.value\n      });\n    };\n    this.handleLogin = async () => {\n      const {\n        userId\n      } = this.state;\n      if (userId.trim()) {\n        try {\n          await this.sb.connect(userId);\n          this.setState({\n            isConnected: true\n          });\n        } catch (error) {\n          console.error('Sendbird Connection Error:', error);\n        }\n      }\n    };\n    this.connectToSenbird = async userId => {\n      try {\n        await this.sb.connect(userId);\n        // ... after successful connection\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createOpenChannel = async () => {\n      const params = {\n        name: \"My Open Channel\",\n        coverUrlOrImage: \"http://example.com/cover.jpg\",\n        operatorUserIds: [\"wonbae\"],\n        data: \"Additional information about the channel\",\n        customType: \"my_custom_type\"\n      };\n      try {\n        const channel = await this.sb.openChannel.createChannel(params);\n        // console.log(\"Open channel created:\", channel);\n        await channel.enter();\n        this.channel = channel; // Set the current channel context\n      } catch (error) {\n        console.error(\"Error creating or entering open channel:\", error);\n      }\n    };\n    this.createGroupChannel = async () => {\n      const params = {\n        invitedUserIds: ['min', 'wonbae'],\n        name: \"My Group Channel\",\n        coverUrl: \"http://example.com/cover.jpg\",\n        operatorUserIds: ['wonbae'],\n        isDistinct: true\n      };\n      const channelHandler = new GroupChannelHandler({\n        onTypingStatusUpdated: channel => {\n          const members = channel.getTypingUsers();\n          console.log(members);\n          // Refresh the typing status of members within the channel.\n        }\n      });\n      try {\n        const channel = await this.sb.groupChannel.createChannel(params);\n        const UNIQUE_HANDLER_ID = \"12345678910\";\n        this.sb.groupChannel.addChannelHandler(UNIQUE_HANDLER_ID, channelHandler);\n        this.channel = channel; // Set the current channel context\n        this.initializeMessageCollection(channel);\n        // console.log(\"Successfully set this.channel to the newly created group channel.\");\n      } catch (error) {\n        console.error(\"Error creating group channel:\", error);\n      }\n    };\n    this.sendMessage = async (textMessage, customType = '', data = '') => {\n      if (!this.channel) {\n        console.error('Channel is not defined.');\n        return;\n      }\n      const params = {\n        message: textMessage,\n        customType: customType,\n        data: data\n      };\n      try {\n        this.channel.sendUserMessage(params).onSucceeded(({\n          messageId,\n          message,\n          createdAt,\n          sender: {\n            userId,\n            nickname\n          }\n        }) => {\n          const formattedMessage = {\n            messageId,\n            message,\n            userId,\n            createdAt,\n            sender: {\n              userId,\n              nickname\n            }\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        }).onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.initializeMessageCollection = async channel => {\n      const filter = new MessageFilter();\n      const limit = 100;\n      const startingPoint = Date.now();\n      const messageCollection = channel.createMessageCollection({\n        filter,\n        limit,\n        startingPoint\n      });\n      const handler = {\n        onMessagesAdded: (context, channel, messages) => {\n          this.setState(prevState => ({\n            messages: [...prevState.messages, ...messages]\n          }));\n        },\n        onMessagesUpdated: (context, channel, messages) => {\n          // Logic to update messages in state\n        },\n        onMessagesDeleted: (context, channel, messageIds) => {\n          // Logic to remove messages from state\n        },\n        onChannelUpdated: (context, channel) => {\n          // Update state or UI with the updated channel information\n        },\n        onChannelDeleted: (context, channelUrl) => {\n          // Clear chat view or update state as needed\n        },\n        onHugeGapDetected: () => {\n          // Handle huge gap detected event\n        }\n      };\n      messageCollection.setMessageCollectionHandler(handler);\n      await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API).onCacheResult((err, messages) => {\n        // console.log(\"Cache result:\", messages);\n        if (!err) {\n          this.setState({\n            messages: messages.reverse()\n          }); // Assuming messages are added to state in reverse order for display\n        } else {\n          console.error(\"Error retrieving messages from cache:\", err);\n        }\n      }).onApiResult((err, messages) => {\n        if (!err) {\n          this.setState({\n            messages: messages.reverse()\n          }); // Update state with latest messages\n        } else {\n          console.error(\"Error retrieving messages from API:\", err);\n        }\n      });\n      this.setState({\n        messageCollection\n      });\n      console.log(\"MessageCollection initialized for channel:\", channel);\n    };\n    this.loadPreviousMessages = async () => {\n      const {\n        messageCollection\n      } = this.state;\n      if (messageCollection && messageCollection.hasPrevious) {\n        console.log(\"Loading previous messages\");\n        const messages = await messageCollection.loadPrevious();\n        console.log(\"Previous messages loaded:\", messages);\n        this.setState(prevState => ({\n          messages: [...messages.reverse(), ...prevState.messages] // Prepend older messages\n        }));\n      } else {\n        console.log(\"No previous messages to load or MessageCollection not initialized\");\n      }\n    };\n    this.state = {\n      messages: [],\n      channelType: null,\n      userId: '',\n      // To be inputted by the user\n      isConnected: false,\n      messageCollection: null\n    };\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()]\n    });\n  }\n  renderChannelTypeSelection() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'open'\n        }, this.createOpenChannel),\n        children: \"Open Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'group'\n        }, this.createGroupChannel),\n        children: \"Group Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    const {\n      isConnected,\n      channelType,\n      messages,\n      userId\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), !isConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter user ID\",\n          value: userId,\n          onChange: this.handleUserIdChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleLogin,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), isConnected && !channelType && this.renderChannelTypeSelection(), isConnected && channelType && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n          sendMessage: this.sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","GroupChannelModule","MessageFilter","MessageCollectionInitPolicy","GroupChannelHandler","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","handleUserIdChange","event","setState","userId","target","value","handleLogin","state","trim","sb","connect","isConnected","error","console","connectToSenbird","createOpenChannel","params","name","coverUrlOrImage","operatorUserIds","data","customType","channel","openChannel","createChannel","enter","createGroupChannel","invitedUserIds","coverUrl","isDistinct","channelHandler","onTypingStatusUpdated","members","getTypingUsers","log","groupChannel","UNIQUE_HANDLER_ID","addChannelHandler","initializeMessageCollection","sendMessage","textMessage","message","sendUserMessage","onSucceeded","messageId","createdAt","sender","nickname","formattedMessage","prevState","messages","onFailed","filter","limit","startingPoint","Date","now","messageCollection","createMessageCollection","handler","onMessagesAdded","context","onMessagesUpdated","onMessagesDeleted","messageIds","onChannelUpdated","onChannelDeleted","channelUrl","onHugeGapDetected","setMessageCollectionHandler","initialize","CACHE_AND_REPLACE_BY_API","onCacheResult","err","reverse","onApiResult","loadPreviousMessages","hasPrevious","loadPrevious","channelType","init","appId","modules","renderChannelTypeSelection","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","render","className","type","placeholder","onChange"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule,  MessageFilter, MessageCollectionInitPolicy, GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      channelType: null,\n      userId: '', // To be inputted by the user\n      isConnected: false,\n      messageCollection: null,  \n    };\n\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()],\n    });\n  }\n\n  handleUserIdChange = (event) => {\n    this.setState({ userId: event.target.value });\n  };\n\n  handleLogin = async () => {\n    const { userId } = this.state;\n    if (userId.trim()) {\n      try {\n        await this.sb.connect(userId);\n        this.setState({ isConnected: true });\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    }\n  };\n\n  connectToSenbird = async (userId) => {\n    try {\n      await this.sb.connect(userId);\n      // ... after successful connection\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createOpenChannel = async () => {\n    const params = {\n      name: \"My Open Channel\",\n      coverUrlOrImage: \"http://example.com/cover.jpg\",\n      operatorUserIds: [\"wonbae\"],\n      data: \"Additional information about the channel\",\n      customType: \"my_custom_type\"\n    };\n\n    try {\n      const channel = await this.sb.openChannel.createChannel(params);\n      // console.log(\"Open channel created:\", channel);\n      await channel.enter();\n      this.channel = channel; // Set the current channel context\n    } catch (error) {\n      console.error(\"Error creating or entering open channel:\", error);\n    }\n  };\n\n  createGroupChannel = async () => {\n    const params = {\n      invitedUserIds: ['min','wonbae'], \n      name: \"My Group Channel\",\n      coverUrl: \"http://example.com/cover.jpg\",\n      operatorUserIds: ['wonbae'], \n      isDistinct: true,\n    };\n  \n    const channelHandler = new GroupChannelHandler({\n      onTypingStatusUpdated: (channel) => {\n          const members = channel.getTypingUsers();\n          console.log(members)\n          // Refresh the typing status of members within the channel.\n      },\n  });\n\n    try {\n      const channel = await this.sb.groupChannel.createChannel(params);\n      const UNIQUE_HANDLER_ID = \"12345678910\"\n      this.sb.groupChannel.addChannelHandler(UNIQUE_HANDLER_ID, channelHandler);\n      this.channel = channel; // Set the current channel context\n      this.initializeMessageCollection(channel);\n      // console.log(\"Successfully set this.channel to the newly created group channel.\");\n    } catch (error) {\n      console.error(\"Error creating group channel:\", error);\n    }\n  };\n  \n\n  sendMessage = async (textMessage, customType = '', data = '') => {\n    if (!this.channel) {\n      console.error('Channel is not defined.');\n      return;\n    }\n\n    const params = {\n      message: textMessage,\n      customType: customType,\n      data: data,\n    };\n\n    try {\n      this.channel.sendUserMessage(params)\n        .onSucceeded(({messageId, message, createdAt, sender: {userId, nickname}}) => {\n      \n          const formattedMessage = {\n            messageId,\n            message,\n            userId,\n            createdAt,\n            sender: {\n              userId,\n              nickname\n            },\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        })\n        .onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n\n  renderChannelTypeSelection() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ channelType: 'open' }, this.createOpenChannel)}>Open Channel</button>\n        <button onClick={() => this.setState({ channelType: 'group' }, this.createGroupChannel)}>Group Channel</button>\n      </div>\n    );\n  }\n\n  initializeMessageCollection = async (channel) => {\n    \n    const filter = new MessageFilter();\n    const limit = 100;\n    const startingPoint = Date.now();\n    const messageCollection = channel.createMessageCollection({\n      filter,\n      limit,\n      startingPoint,\n    });\n\n    const handler = {\n      onMessagesAdded: (context, channel, messages) => {\n          this.setState(prevState => ({\n              messages: [...prevState.messages, ...messages]\n          }));\n      },\n      onMessagesUpdated: (context, channel, messages) => {\n          // Logic to update messages in state\n      },\n      onMessagesDeleted: (context, channel, messageIds) => {\n          // Logic to remove messages from state\n      },\n      onChannelUpdated: (context, channel) => {\n          // Update state or UI with the updated channel information\n      },\n      onChannelDeleted: (context, channelUrl) => {\n          // Clear chat view or update state as needed\n      },\n      onHugeGapDetected: () => {\n          // Handle huge gap detected event\n      }\n  };\n\n    messageCollection.setMessageCollectionHandler(handler);\n\n\n  \n    await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n      .onCacheResult((err, messages) => {\n        // console.log(\"Cache result:\", messages);\n        if (!err) {\n          this.setState({ messages: messages.reverse() }); // Assuming messages are added to state in reverse order for display\n        } else {\n          console.error(\"Error retrieving messages from cache:\", err);\n        }\n      })\n      .onApiResult((err, messages) => {\n        if (!err) {\n          this.setState({ messages: messages.reverse() }); // Update state with latest messages\n        } else {\n          console.error(\"Error retrieving messages from API:\", err);\n        }\n      });\n  \n    this.setState({ messageCollection });\n  \n    console.log(\"MessageCollection initialized for channel:\", channel);\n  };\n  \n  loadPreviousMessages = async () => {\n    const { messageCollection } = this.state;\n    if (messageCollection && messageCollection.hasPrevious) {\n      console.log(\"Loading previous messages\");\n      const messages = await messageCollection.loadPrevious();\n      console.log(\"Previous messages loaded:\", messages);\n      this.setState(prevState => ({\n        messages: [...messages.reverse(), ...prevState.messages], // Prepend older messages\n      }));\n    } else {\n      console.log(\"No previous messages to load or MessageCollection not initialized\");\n    }\n  };\n\n\n  \n\n\n\n\n\n  \n  render() {\n    const { isConnected, channelType, messages, userId } = this.state;\n    return (\n      <div className=\"app\">\n        <Title />\n        {!isConnected && (\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Enter user ID\"\n              value={userId}\n              onChange={this.handleUserIdChange}\n            />\n            <button onClick={this.handleLogin}>Login</button>\n          </div>\n        )}\n        {isConnected && !channelType && this.renderChannelTypeSelection()}\n        {isConnected && channelType && (\n          <>\n            <MessageList messages={messages} />\n            <SendMessageForm sendMessage={this.sendMessage} />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}