{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { GroupChannelModule, MessageFilter, MessageCollectionInitPolicy } from '@sendbird/chat/groupChannel';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.handleUserIdChange = event => {\n      this.setState({\n        userId: event.target.value\n      }, () => console.log('UserId updated:', this.state.userId));\n    };\n    this.handleLogin = async e => {\n      e.preventDefault();\n      const {\n        userId\n      } = this.state;\n      if (userId.trim()) {\n        try {\n          await this.sb.connect(userId);\n          this.setState({\n            isConnected: true\n          }, () => console.log('User connected with userId:', this.state.userId));\n        } catch (error) {\n          console.error('Sendbird Connection Error:', error);\n        }\n      }\n    };\n    this.connectToSenbird = async userId => {\n      try {\n        await this.sb.connect(userId);\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createGroupChannel = async () => {\n      const params = {\n        invitedUserIds: ['pubmed-chat', 'wonbae'],\n        name: \"pubchat\",\n        coverUrl: \"http://example.com/cover.jpg\",\n        operatorUserIds: ['wonbae'],\n        isDistinct: true\n      };\n      try {\n        const channel = await this.sb.groupChannel.createChannel(params);\n        this.channel = channel;\n        this.initializeMessageCollection(channel);\n        // console.log(\"Successfully set this.channel to the newly created group channel.\");\n      } catch (error) {\n        console.error(\"Error creating group channel:\", error);\n      }\n    };\n    this.sendMessage = async (textMessage, customType = '', data = '') => {\n      if (!this.channel) {\n        console.error('Channel is not defined.');\n        return;\n      }\n      const params = {\n        message: textMessage,\n        customType: customType,\n        data: data\n      };\n      try {\n        this.channel.sendUserMessage(params).onSucceeded(({\n          messageId,\n          message,\n          createdAt,\n          sender: {\n            userId,\n            nickname\n          }\n        }) => {\n          const formattedMessage = {\n            messageId,\n            message,\n            userId,\n            createdAt,\n            sender: {\n              userId,\n              nickname\n            }\n          };\n        }).onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.initializeMessageCollection = async channel => {\n      const filter = new MessageFilter();\n      const limit = 100;\n      const startingPoint = Date.now();\n      const messageCollection = channel.createMessageCollection({\n        filter,\n        limit,\n        startingPoint\n      });\n      const handler = {\n        onMessagesAdded: (context, channel, messages) => {\n          this.setState(prevState => ({\n            messages: [...prevState.messages, ...messages.map(message => ({\n              ...message,\n              isCurrentUser: message.sender.userId === this.state.userId\n            }))]\n          }));\n        },\n        onMessagesUpdated: (context, channel, messages) => {\n          // PLACEHOLDER: Logic to update messages in state\n        },\n        onMessagesDeleted: (context, channel, messageIds) => {\n          // PLACEHOLDER: Logic to remove messages from state\n        },\n        onChannelUpdated: (context, channel) => {\n          this.setState({\n            channel,\n            typingMembers: channel.getTypingUsers()\n          });\n        },\n        onChannelDeleted: (context, channelUrl) => {\n          // PLACEHOLDER: Clear chat view or update state as needed\n        },\n        onHugeGapDetected: () => {\n          // PLACEHOLDER: Handle huge gap detected event\n        }\n      };\n      messageCollection.setMessageCollectionHandler(handler);\n      await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API).onCacheResult((err, messages) => {\n        if (!err) {\n          const modifiedMessages = messages.reverse().map(message => ({\n            ...message,\n            isCurrentUser: message.sender.userId === this.state.userId // Compare with current user's ID\n          }));\n          this.setState({\n            messages: modifiedMessages\n          });\n        } else {\n          console.error(\"Error retrieving messages from cache:\", err);\n        }\n      }).onApiResult((err, messages) => {\n        if (!err) {\n          const modifiedMessages = messages.reverse().map(message => ({\n            ...message,\n            isCurrentUser: message.sender.userId === this.state.userId\n          }));\n          this.setState({\n            messages: modifiedMessages\n          });\n        } else {\n          console.error(\"Error retrieving messages from API:\", err);\n        }\n      });\n      this.setState({\n        messageCollection\n      });\n    };\n    this.state = {\n      messages: [],\n      channel: null,\n      channelType: null,\n      userId: '',\n      isConnected: false,\n      messageCollection: null\n    };\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new GroupChannelModule()]\n    });\n  }\n  renderChannelTypeSelection() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'group'\n        }, this.createGroupChannel),\n        children: \"Chatbot Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n  // loadPreviousMessages = async () => {\n  //   const { messageCollection } = this.state;\n  //   if (messageCollection && messageCollection.hasPrevious) {\n  //     console.log(\"Loading previous messages\");\n  //     const messages = await messageCollection.loadPrevious();\n  //     console.log(\"Previous messages loaded:\", messages);\n  //     this.setState(prevState => ({\n  //       messages: [...messages.reverse(), ...prevState.messages], \n  //     }));\n  //   } else {\n  //     console.log(\"No previous messages to load or MessageCollection not initialized\");\n  //   }\n  // };\n\n  render() {\n    const {\n      isConnected,\n      channel,\n      channelType,\n      messages,\n      userId,\n      typingMembers\n    } = this.state;\n    console.log(typingMembers, 'members');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar\",\n        children: \"SendBird SDK Chat with PubMed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [!isConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-card\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleLogin,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter user ID\",\n              value: userId,\n              onChange: this.handleUserIdChange,\n              className: \"login-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              onClick: this.handleLogin,\n              className: \"login-button\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }, this), isConnected && !channelType && this.renderChannelTypeSelection(), isConnected && channelType && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n            channel: channel,\n            sendMessage: this.sendMessage,\n            currentUserId: this.state.userId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), (typingMembers === null || typingMembers === void 0 ? void 0 : typingMembers.length) > 0 && typingMembers.map(member => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typingMessage\",\n              children: `${member.nickname} is typing...`\n            }, member.nickname, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 22\n            }, this);\n          })]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","GroupChannelModule","MessageFilter","MessageCollectionInitPolicy","MessageList","SendMessageForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","handleUserIdChange","event","setState","userId","target","value","console","log","state","handleLogin","e","preventDefault","trim","sb","connect","isConnected","error","connectToSenbird","createGroupChannel","params","invitedUserIds","name","coverUrl","operatorUserIds","isDistinct","channel","groupChannel","createChannel","initializeMessageCollection","sendMessage","textMessage","customType","data","message","sendUserMessage","onSucceeded","messageId","createdAt","sender","nickname","formattedMessage","onFailed","filter","limit","startingPoint","Date","now","messageCollection","createMessageCollection","handler","onMessagesAdded","context","messages","prevState","map","isCurrentUser","onMessagesUpdated","onMessagesDeleted","messageIds","onChannelUpdated","typingMembers","getTypingUsers","onChannelDeleted","channelUrl","onHugeGapDetected","setMessageCollectionHandler","initialize","CACHE_AND_REPLACE_BY_API","onCacheResult","err","modifiedMessages","reverse","onApiResult","channelType","init","appId","modules","renderChannelTypeSelection","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","render","className","onSubmit","type","placeholder","onChange","currentUserId","length","member"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { GroupChannelModule,  MessageFilter, MessageCollectionInitPolicy } from '@sendbird/chat/groupChannel';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      channel: null,\n      channelType: null,\n      userId: '', \n      isConnected: false,\n      messageCollection: null,  \n    };\n\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new GroupChannelModule()],\n    });\n  }\n\n  handleUserIdChange = (event) => {\n    this.setState({ userId: event.target.value }, () => console.log('UserId updated:', this.state.userId));\n  };\n\n  handleLogin = async (e) => {\n    e.preventDefault();\n    const { userId } = this.state;\n    if (userId.trim()) {\n      try {\n        await this.sb.connect(userId);\n        this.setState({ isConnected: true }, () => console.log('User connected with userId:', this.state.userId));\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    }\n  };\n\n  connectToSenbird = async (userId) => {\n    try {\n      await this.sb.connect(userId);\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createGroupChannel = async () => {\n    const params = {\n      invitedUserIds: ['pubmed-chat','wonbae'], \n      name: \"pubchat\",\n      coverUrl: \"http://example.com/cover.jpg\",\n      operatorUserIds: ['wonbae'], \n      isDistinct: true,\n    };\n  \n    try {\n      const channel = await this.sb.groupChannel.createChannel(params);\n      this.channel = channel; \n      this.initializeMessageCollection(channel);\n      // console.log(\"Successfully set this.channel to the newly created group channel.\");\n    } catch (error) {\n      console.error(\"Error creating group channel:\", error);\n    }\n  };\n  sendMessage = async (textMessage, customType = '', data = '') => {\n    if (!this.channel) {\n      console.error('Channel is not defined.');\n      return;\n    }\n\n    const params = {\n      message: textMessage,\n      customType: customType,\n      data: data,\n    };\n\n    try {\n      this.channel.sendUserMessage(params)\n        .onSucceeded(({messageId, message, createdAt, sender: {userId, nickname}}) => {\n      \n          const formattedMessage = {\n            messageId,\n            message,\n            userId,\n            createdAt,\n            sender: {\n              userId,\n              nickname\n            },\n          };\n        })\n        .onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n\n  renderChannelTypeSelection() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ channelType: 'group' }, this.createGroupChannel)}>Chatbot Channel</button>\n      </div>\n    );\n  }\n\n  initializeMessageCollection = async (channel) => {\n    \n    const filter = new MessageFilter();\n    const limit = 100;\n    const startingPoint = Date.now();\n    const messageCollection = channel.createMessageCollection({\n      filter,\n      limit,\n      startingPoint,\n    });\n\n    const handler = {\n      onMessagesAdded: (context, channel, messages) => {\n        this.setState(prevState => ({\n          messages: [\n            ...prevState.messages,\n            ...messages.map(message => ({\n              ...message,\n              isCurrentUser: message.sender.userId === this.state.userId\n            }))\n          ]\n        }));\n      },\n      onMessagesUpdated: (context, channel, messages) => {\n          // PLACEHOLDER: Logic to update messages in state\n      },\n      onMessagesDeleted: (context, channel, messageIds) => {\n          // PLACEHOLDER: Logic to remove messages from state\n      },\n  \n      onChannelUpdated: (context, channel) => {\n        this.setState({channel, typingMembers: channel.getTypingUsers()});\n      },\n      onChannelDeleted: (context, channelUrl) => {\n          // PLACEHOLDER: Clear chat view or update state as needed\n      },\n      onHugeGapDetected: () => {\n          // PLACEHOLDER: Handle huge gap detected event\n      }\n  };\n\n    messageCollection.setMessageCollectionHandler(handler);\n\n    await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n    .onCacheResult((err, messages) => {\n      if (!err) {\n        const modifiedMessages = messages.reverse().map(message => ({\n          ...message,\n          isCurrentUser: message.sender.userId === this.state.userId, // Compare with current user's ID\n        }));\n        this.setState({ messages: modifiedMessages });\n      } else {\n        console.error(\"Error retrieving messages from cache:\", err);\n      }\n    })\n    .onApiResult((err, messages) => {\n      if (!err) {\n        const modifiedMessages = messages.reverse().map(message => ({\n          ...message,\n          isCurrentUser: message.sender.userId === this.state.userId, \n        }));\n        this.setState({ messages: modifiedMessages }); \n      } else {\n        console.error(\"Error retrieving messages from API:\", err);\n      }\n    });\n    this.setState({ messageCollection });\n  };\n  \n  // loadPreviousMessages = async () => {\n  //   const { messageCollection } = this.state;\n  //   if (messageCollection && messageCollection.hasPrevious) {\n  //     console.log(\"Loading previous messages\");\n  //     const messages = await messageCollection.loadPrevious();\n  //     console.log(\"Previous messages loaded:\", messages);\n  //     this.setState(prevState => ({\n  //       messages: [...messages.reverse(), ...prevState.messages], \n  //     }));\n  //   } else {\n  //     console.log(\"No previous messages to load or MessageCollection not initialized\");\n  //   }\n  // };\n\n  render() {\n    const { isConnected, channel, channelType, messages, userId, typingMembers } = this.state;\n    console.log(typingMembers, 'members');\n    return (\n      <div className=\"app\">\n        <div className=\"navbar\">SendBird SDK Chat with PubMed</div>\n      <div className=\"form-container\">\n      {!isConnected && (\n        <div className=\"form-card\">\n          <form onSubmit={this.handleLogin}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter user ID\"\n              value={userId}\n              onChange={this.handleUserIdChange}\n              className=\"login-input\"\n            />\n            <button type=\"submit\" onClick={this.handleLogin} className=\"login-button\">Login</button>\n          </form>\n        </div>\n        )}\n        {isConnected && !channelType && this.renderChannelTypeSelection()}\n        {isConnected && channelType && (\n          <>\n            <MessageList messages={messages} />\n            <SendMessageForm channel={channel} sendMessage={this.sendMessage} currentUserId={this.state.userId}/>\n            {typingMembers?.length > 0 && typingMembers.map((member) => {\n              return <div key={member.nickname} className=\"typingMessage\">{`${member.nickname} is typing...`}</div>;})}\n          </>\n        )}\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}