{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       messages: [],\n//     };\n//     // Initialize Sendbird Chat SDK \n//     this.sb = SendbirdChat.init({\n//       appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110', \n//       modules: new OpenChannelModule(),\n//     });\n//     this.channel = null;\n//   }\n\n//   async componentDidMount() {\n//     await this.connectToSenbird();\n//     // Additional logic to join a channel and fetch messages will be implemented here\n//   }\n\n//   connectToSenbird = async () => {\n//     try {\n//       const user = await this.sb.connect('wonbae'); \n//       console.log('User connected:', user);\n\n//       // Example of creating and entering an open channel\n//       const channel = await this.sb.openChannel.createChannel({ name: 'Test Channel' });\n//       await channel.enter();\n//       this.channel = channel;\n\n//       this.loadMessages();\n//     } catch (error) {\n//       console.error('Sendbird Connection Error:', error);\n//     }\n//   };\n\n//   loadMessages = async () => {\n//     // Implement message loading logic\n//     // This will depend on whether you're using open channels or group channels\n//   };\n\n//   sendMessage = async (text) => {\n//     // Example of sending a message to an open channel\n//     try {\n//       const message = await this.channel.sendUserMessage({ message: text });\n//       this.setState({ messages: [...this.state.messages, message] });\n//     } catch (error) {\n//       console.error('Send Message Error:', error);\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"app\">\n//         <Title />\n//         <MessageList messages={this.state.messages} />\n//         <SendMessageForm sendMessage={this.sendMessage} />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.connectToSenbird = async () => {\n      try {\n        await this.sb.connect('wonbae'); // Replace 'YOUR_USER_ID' with the user's unique ID\n        this.createOpenChannel();\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createOpenChannel = async () => {\n      const params = {\n        name: \"hello-world\",\n        channelUrl: \"unique_channel_url\",\n        // This is optional; if not provided, it will be automatically generated\n        coverUrlOrImage: \"http://example.com/cover.jpg\",\n        // Replace with your cover image URL\n        operatorUserIds: [\"wonbae\"],\n        // Replace with actual operator user IDs\n        data: \"New Channel\",\n        customType: \"my_custom_type\"\n      };\n      try {\n        const channel = await this.sb.openChannel.createChannel(params);\n        console.log(\"Open channel created:\", channel);\n        // Save channel reference if needed or proceed with other logic\n      } catch (error) {\n        console.error(\"Error creating open channel:\", error);\n      }\n    };\n    this.state = {\n      messages: []\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      // Replace 'YOUR_APP_ID' with your actual Sendbird application ID\n      modules: [new OpenChannelModule()]\n    });\n  }\n  async componentDidMount() {\n    await this.connectToSenbird();\n  }\n  // Additional component methods...\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: this.state.messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n        sendMessage: this.sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","App","constructor","connectToSenbird","sb","connect","createOpenChannel","error","console","params","name","channelUrl","coverUrlOrImage","operatorUserIds","data","customType","channel","openChannel","createChannel","log","state","messages","init","appId","modules","componentDidMount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sendMessage"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       messages: [],\n//     };\n//     // Initialize Sendbird Chat SDK \n//     this.sb = SendbirdChat.init({\n//       appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110', \n//       modules: new OpenChannelModule(),\n//     });\n//     this.channel = null;\n//   }\n\n//   async componentDidMount() {\n//     await this.connectToSenbird();\n//     // Additional logic to join a channel and fetch messages will be implemented here\n//   }\n\n//   connectToSenbird = async () => {\n//     try {\n//       const user = await this.sb.connect('wonbae'); \n//       console.log('User connected:', user);\n\n//       // Example of creating and entering an open channel\n//       const channel = await this.sb.openChannel.createChannel({ name: 'Test Channel' });\n//       await channel.enter();\n//       this.channel = channel;\n\n//       this.loadMessages();\n//     } catch (error) {\n//       console.error('Sendbird Connection Error:', error);\n//     }\n//   };\n\n//   loadMessages = async () => {\n//     // Implement message loading logic\n//     // This will depend on whether you're using open channels or group channels\n//   };\n\n//   sendMessage = async (text) => {\n//     // Example of sending a message to an open channel\n//     try {\n//       const message = await this.channel.sendUserMessage({ message: text });\n//       this.setState({ messages: [...this.state.messages, message] });\n//     } catch (error) {\n//       console.error('Send Message Error:', error);\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"app\">\n//         <Title />\n//         <MessageList messages={this.state.messages} />\n//         <SendMessageForm sendMessage={this.sendMessage} />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110', // Replace 'YOUR_APP_ID' with your actual Sendbird application ID\n      modules: [new OpenChannelModule()],\n    });\n  }\n\n  async componentDidMount() {\n    await this.connectToSenbird();\n  }\n\n  connectToSenbird = async () => {\n    try {\n      await this.sb.connect('wonbae'); // Replace 'YOUR_USER_ID' with the user's unique ID\n      this.createOpenChannel();\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createOpenChannel = async () => {\n    const params = {\n      name: \"hello-world\",\n      channelUrl: \"unique_channel_url\", // This is optional; if not provided, it will be automatically generated\n      coverUrlOrImage: \"http://example.com/cover.jpg\", // Replace with your cover image URL\n      operatorUserIds: [\"wonbae\"], // Replace with actual operator user IDs\n      data: \"New Channel\",\n      customType: \"my_custom_type\"\n    };\n\n    try {\n      const channel = await this.sb.openChannel.createChannel(params);\n      console.log(\"Open channel created:\", channel);\n      // Save channel reference if needed or proceed with other logic\n    } catch (error) {\n      console.error(\"Error creating open channel:\", error);\n    }\n  };\n\n  // Additional component methods...\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Title />\n        <MessageList messages={this.state.messages} />\n        <SendMessageForm sendMessage={this.sendMessage} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}