{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.connectToSenbird = async () => {\n      try {\n        await this.sb.connect('wonbae');\n        this.createOpenChannel();\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createOpenChannel = async () => {\n      const params = {\n        name: \"My channel 123\",\n        // channelUrl: \"unique\", // Optional: If not provided, Sendbird generates it automatically\n        coverUrlOrImage: \"http://example.com/cover.jpg\",\n        operatorUserIds: [\"wonbae\"],\n        data: \"Additional information about the channel\",\n        customType: \"my_custom_type\"\n      };\n      try {\n        const channel = await this.sb.openChannel.createChannel(params);\n        console.log(\"Open channel created:\", channel);\n\n        // Enter the created channel\n        await channel.enter();\n        this.channel = channel;\n        console.log(\"Successfully entered the channel:\", channel.url);\n\n        // Proceed with other logic, such as fetching channel messages or updating the UI\n      } catch (error) {\n        console.error(\"Error creating or entering open channel:\", error);\n      }\n    };\n    this.sendMessage = async (textMessage, customType = '', data = '') => {\n      // Ensure the channel object is correctly initialized\n      if (!this.channel) {\n        console.error('Channel is not defined.');\n        return;\n      }\n      const params = {\n        message: textMessage,\n        customType: customType,\n        data: data\n        // Additional parameters based on your application's requirements\n      };\n      try {\n        this.channel.sendUserMessage(params).onSucceeded(message => {\n          console.log(\"Message sent successfully:\", message);\n          // Update the state with the new message to re-render the message list\n          this.setState(prevState => ({\n            messages: [...prevState.messages, message]\n          }));\n        }).onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.state = {\n      messages: []\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule()]\n    });\n  }\n  async componentDidMount() {\n    await this.connectToSenbird();\n  }\n  // Additional component methods...\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: this.state.messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n        sendMessage: this.sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","App","constructor","connectToSenbird","sb","connect","createOpenChannel","error","console","params","name","coverUrlOrImage","operatorUserIds","data","customType","channel","openChannel","createChannel","log","enter","url","sendMessage","textMessage","message","sendUserMessage","onSucceeded","setState","prevState","messages","onFailed","state","init","appId","modules","componentDidMount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110', \n      modules: [new OpenChannelModule()],\n    });\n  }\n\n  async componentDidMount() {\n    await this.connectToSenbird();\n  }\n\n  connectToSenbird = async () => {\n    try {\n      await this.sb.connect('wonbae'); \n      this.createOpenChannel();\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createOpenChannel = async () => {\n    const params = {\n      name: \"My channel 123\",\n      // channelUrl: \"unique\", // Optional: If not provided, Sendbird generates it automatically\n      coverUrlOrImage: \"http://example.com/cover.jpg\",\n      operatorUserIds: [\"wonbae\"],\n      data: \"Additional information about the channel\",\n      customType: \"my_custom_type\"\n    };\n  \n    try {\n      const channel = await this.sb.openChannel.createChannel(params);\n      console.log(\"Open channel created:\", channel);\n  \n      // Enter the created channel\n      await channel.enter();\n      this.channel = channel;\n      console.log(\"Successfully entered the channel:\", channel.url);\n  \n      // Proceed with other logic, such as fetching channel messages or updating the UI\n    } catch (error) {\n      console.error(\"Error creating or entering open channel:\", error);\n    }\n  };\n\n  sendMessage = async (textMessage, customType = '', data = '') => {\n    // Ensure the channel object is correctly initialized\n    if (!this.channel) {\n      console.error('Channel is not defined.');\n      return;\n    }\n  \n    const params = {\n      message: textMessage,\n      customType: customType,\n      data: data,\n      // Additional parameters based on your application's requirements\n    };\n  \n    try {\n      this.channel.sendUserMessage(params)\n        .onSucceeded((message) => {\n          console.log(\"Message sent successfully:\", message);\n          // Update the state with the new message to re-render the message list\n          this.setState(prevState => ({\n            messages: [...prevState.messages, message]\n          }));\n        })\n        .onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n  \n  // Additional component methods...\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Title />\n        <MessageList messages={this.state.messages} />\n        <SendMessageForm sendMessage={this.sendMessage} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}