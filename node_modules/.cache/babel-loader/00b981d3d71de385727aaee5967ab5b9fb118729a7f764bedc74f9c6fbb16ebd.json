{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule, GroupChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.connectToSenbird = async () => {\n      try {\n        const user = await this.sb.connect('wonbae'); // Replace 'YOUR_USER_ID' with the user's unique ID\n        console.log('User connected:', user);\n\n        // Example of creating and entering an open channel\n        const channel = await this.sb.openChannel.createChannel({\n          name: 'Test Channel'\n        });\n        await channel.enter();\n        this.channel = channel;\n        this.loadMessages();\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.loadMessages = async () => {\n      // Implement message loading logic\n      // This will depend on whether you're using open channels or group channels\n    };\n    this.sendMessage = async text => {\n      // Example of sending a message to an open channel\n      try {\n        const message = await this.channel.sendUserMessage({\n          message: text\n        });\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n      } catch (error) {\n        console.error('Send Message Error:', error);\n      }\n    };\n    this.state = {\n      messages: []\n    };\n    // Initialize Sendbird Chat SDK \n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()]\n    });\n    this.channel = null;\n  }\n  async componentDidMount() {\n    await this.connectToSenbird();\n    // Additional logic to join a channel and fetch messages will be implemented here\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: this.state.messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n        sendMessage: this.sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","GroupChannelModule","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","App","constructor","connectToSenbird","user","sb","connect","console","log","channel","openChannel","createChannel","name","enter","loadMessages","error","sendMessage","text","message","sendUserMessage","setState","messages","state","init","appId","modules","componentDidMount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule, GroupChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n    };\n    // Initialize Sendbird Chat SDK \n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110', \n      modules: [new OpenChannelModule(), new GroupChannelModule()],\n    });\n    this.channel = null;\n  }\n\n  async componentDidMount() {\n    await this.connectToSenbird();\n    // Additional logic to join a channel and fetch messages will be implemented here\n  }\n\n  connectToSenbird = async () => {\n    try {\n      const user = await this.sb.connect('wonbae'); // Replace 'YOUR_USER_ID' with the user's unique ID\n      console.log('User connected:', user);\n\n      // Example of creating and entering an open channel\n      const channel = await this.sb.openChannel.createChannel({ name: 'Test Channel' });\n      await channel.enter();\n      this.channel = channel;\n\n      this.loadMessages();\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  loadMessages = async () => {\n    // Implement message loading logic\n    // This will depend on whether you're using open channels or group channels\n  };\n\n  sendMessage = async (text) => {\n    // Example of sending a message to an open channel\n    try {\n      const message = await this.channel.sendUserMessage({ message: text });\n      this.setState({ messages: [...this.state.messages, message] });\n    } catch (error) {\n      console.error('Send Message Error:', error);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Title />\n        <MessageList messages={this.state.messages} />\n        <SendMessageForm sendMessage={this.sendMessage} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}