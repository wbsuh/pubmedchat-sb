{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.connectToSenbird = async () => {\n      try {\n        await this.sb.connect('wonbae'); // Replace 'YOUR_USER_ID' with the user's unique ID\n        this.createOpenChannel();\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createOpenChannel = async () => {\n      const params = {\n        name: \"My channel 123\",\n        channelUrl: \"unique\",\n        // Optional: If not provided, Sendbird generates it automatically\n        coverUrlOrImage: \"http://example.com/cover.jpg\",\n        operatorUserIds: [\"user1\", \"user2\"],\n        data: \"Additional information about the channel\",\n        customType: \"my_custom_type\"\n      };\n      try {\n        const channel = await this.sb.openChannel.createChannel(params);\n        console.log(\"Open channel created:\", channel);\n\n        // Enter the created channel\n        await channel.enter();\n        console.log(\"Successfully entered the channel:\", channel.url);\n\n        // Proceed with other logic, such as fetching channel messages or updating the UI\n      } catch (error) {\n        console.error(\"Error creating or entering open channel:\", error);\n      }\n    };\n    this.sendMessage = async textMessage => {\n      const params = {\n        message: textMessage\n      };\n      try {\n        const messageResponse = await this.channel.sendUserMessage(params);\n        console.log(\"Message sent successfully\", messageResponse);\n        // Optionally update your state or UI based on the message being sent\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.state = {\n      messages: []\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule()]\n    });\n  }\n  async componentDidMount() {\n    await this.connectToSenbird();\n  }\n  // Additional component methods...\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: this.state.messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n        sendMessage: this.sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","App","constructor","connectToSenbird","sb","connect","createOpenChannel","error","console","params","name","channelUrl","coverUrlOrImage","operatorUserIds","data","customType","channel","openChannel","createChannel","log","enter","url","sendMessage","textMessage","message","messageResponse","sendUserMessage","state","messages","init","appId","modules","componentDidMount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110', \n      modules: [new OpenChannelModule()],\n    });\n  }\n\n  async componentDidMount() {\n    await this.connectToSenbird();\n  }\n\n  connectToSenbird = async () => {\n    try {\n      await this.sb.connect('wonbae'); // Replace 'YOUR_USER_ID' with the user's unique ID\n      this.createOpenChannel();\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createOpenChannel = async () => {\n    const params = {\n      name: \"My channel 123\",\n      channelUrl: \"unique\", // Optional: If not provided, Sendbird generates it automatically\n      coverUrlOrImage: \"http://example.com/cover.jpg\",\n      operatorUserIds: [\"user1\", \"user2\"],\n      data: \"Additional information about the channel\",\n      customType: \"my_custom_type\"\n    };\n  \n    try {\n      const channel = await this.sb.openChannel.createChannel(params);\n      console.log(\"Open channel created:\", channel);\n  \n      // Enter the created channel\n      await channel.enter();\n      console.log(\"Successfully entered the channel:\", channel.url);\n  \n      // Proceed with other logic, such as fetching channel messages or updating the UI\n    } catch (error) {\n      console.error(\"Error creating or entering open channel:\", error);\n    }\n  };\n\n  sendMessage = async (textMessage) => {\n    const params = {\n      message: textMessage,\n    };\n  \n    try {\n      const messageResponse = await this.channel.sendUserMessage(params);\n      console.log(\"Message sent successfully\", messageResponse);\n      // Optionally update your state or UI based on the message being sent\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n  \n\n  // Additional component methods...\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Title />\n        <MessageList messages={this.state.messages} />\n        <SendMessageForm sendMessage={this.sendMessage} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}