{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.connectToSenbird = async userId => {\n      try {\n        await this.sb.connect(userId);\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createOpenChannel = async () => {\n      const params = {\n        name: \"My Open Channel\",\n        coverUrlOrImage: \"http://example.com/cover.jpg\",\n        operatorUserIds: [\"wonbae\"],\n        data: \"Additional information about the channel\",\n        customType: \"my_custom_type\"\n      };\n      try {\n        const channel = await this.sb.openChannel.createChannel(params);\n        console.log(\"Open channel created:\", channel);\n        await channel.enter();\n        this.channel = channel; // Set the current channel context\n      } catch (error) {\n        console.error(\"Error creating or entering open channel:\", error);\n      }\n    };\n    this.createGroupChannel = async () => {\n      const params = {\n        invitedUserIds: ['min', 'wonbae'],\n        name: \"My Group Channel\",\n        coverUrl: \"http://example.com/cover.jpg\",\n        operatorUserIds: ['wonbae'],\n        isDistinct: true\n      };\n      try {\n        const channel = await this.sb.groupChannel.createChannel(params);\n        console.log(\"Group channel created:\", channel);\n        this.channel = channel; // Set the current channel context\n        console.log(\"Successfully set this.channel to the newly created group channel.\");\n      } catch (error) {\n        console.error(\"Error creating group channel:\", error);\n      }\n    };\n    this.sendMessage = async (textMessage, customType = '', data = '') => {\n      if (!this.channel) {\n        console.error('Channel is not defined.');\n        return;\n      }\n      const params = {\n        message: textMessage,\n        customType: customType,\n        data: data\n      };\n      try {\n        this.channel.sendUserMessage(params).onSucceeded(message => {\n          const formattedMessage = {\n            messageId: message.messageId,\n            text: message.message,\n            senderId: message.sender.userId,\n            createdAt: message.createdAt,\n            nickname: message.sender.nickname\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        }).onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.state = {\n      messages: [],\n      channelType: null,\n      userId: '' // To be inputted by the user \n    };\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()]\n    });\n  }\n  async componentDidMount() {\n    await this.connectToSenbird('min');\n  }\n  renderChannelTypeSelection() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'open'\n        }, this.createOpenChannel),\n        children: \"Open Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'group'\n        }, this.createGroupChannel),\n        children: \"Group Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), !this.state.channelType && this.renderChannelTypeSelection(), this.state.channelType && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: this.state.messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n          sendMessage: this.sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","GroupChannelModule","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","connectToSenbird","userId","sb","connect","error","console","createOpenChannel","params","name","coverUrlOrImage","operatorUserIds","data","customType","channel","openChannel","createChannel","log","enter","createGroupChannel","invitedUserIds","coverUrl","isDistinct","groupChannel","sendMessage","textMessage","message","sendUserMessage","onSucceeded","formattedMessage","messageId","text","senderId","sender","createdAt","nickname","setState","prevState","messages","onFailed","state","channelType","init","appId","modules","componentDidMount","renderChannelTypeSelection","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","render","className"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule } from '@sendbird/chat/openChannel';\nimport { GroupChannelModule } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      channelType: null,\n      userId: '', // To be inputted by the user \n    };\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()],\n    });\n  }\n\n  async componentDidMount() {\n    await this.connectToSenbird('min');\n  }\n\n  connectToSenbird = async (userId) => {\n    try {\n      await this.sb.connect(userId);\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createOpenChannel = async () => {\n    const params = {\n      name: \"My Open Channel\",\n      coverUrlOrImage: \"http://example.com/cover.jpg\",\n      operatorUserIds: [\"wonbae\"],\n      data: \"Additional information about the channel\",\n      customType: \"my_custom_type\"\n    };\n\n    try {\n      const channel = await this.sb.openChannel.createChannel(params);\n      console.log(\"Open channel created:\", channel);\n      await channel.enter();\n      this.channel = channel; // Set the current channel context\n    } catch (error) {\n      console.error(\"Error creating or entering open channel:\", error);\n    }\n  };\n\n  createGroupChannel = async () => {\n    const params = {\n      invitedUserIds: ['min','wonbae'], \n      name: \"My Group Channel\",\n      coverUrl: \"http://example.com/cover.jpg\",\n      operatorUserIds: ['wonbae'], \n      isDistinct: true,\n    };\n  \n    try {\n      const channel = await this.sb.groupChannel.createChannel(params);\n      console.log(\"Group channel created:\", channel);\n      this.channel = channel; // Set the current channel context\n      console.log(\"Successfully set this.channel to the newly created group channel.\");\n    } catch (error) {\n      console.error(\"Error creating group channel:\", error);\n    }\n  };\n\n  sendMessage = async (textMessage, customType = '', data = '') => {\n    if (!this.channel) {\n      console.error('Channel is not defined.');\n      return;\n    }\n\n    const params = {\n      message: textMessage,\n      customType: customType,\n      data: data,\n    };\n\n    try {\n      this.channel.sendUserMessage(params)\n        .onSucceeded((message) => {\n          const formattedMessage = {\n            messageId: message.messageId,\n            text: message.message,\n            senderId: message.sender.userId,\n            createdAt: message.createdAt,\n            nickname: message.sender.nickname,\n          };\n          this.setState(prevState => ({\n            messages: [...prevState.messages, formattedMessage]\n          }));\n        })\n        .onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n\n  renderChannelTypeSelection() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ channelType: 'open' }, this.createOpenChannel)}>Open Channel</button>\n        <button onClick={() => this.setState({ channelType: 'group' }, this.createGroupChannel)}>Group Channel</button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Title />\n        {!this.state.channelType && this.renderChannelTypeSelection()}\n        {this.state.channelType && (\n          <>\n            <MessageList messages={this.state.messages} />\n            <SendMessageForm sendMessage={this.sendMessage} />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}