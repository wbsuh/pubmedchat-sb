{"ast":null,"code":"var _jsxFileName = \"/Users/wsuh/Code/my-chat-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { GroupChannelModule, MessageFilter, MessageCollectionInitPolicy, GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.handleUserIdChange = event => {\n      this.setState({\n        userId: event.target.value\n      });\n    };\n    this.handleLogin = async e => {\n      e.preventDefault();\n      const {\n        userId\n      } = this.state;\n      if (userId.trim()) {\n        try {\n          await this.sb.connect(userId);\n          this.setState({\n            isConnected: true\n          });\n        } catch (error) {\n          console.error('Sendbird Connection Error:', error);\n        }\n      }\n    };\n    this.connectToSenbird = async userId => {\n      try {\n        await this.sb.connect(userId);\n        // ... after successful connection\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.createGroupChannel = async () => {\n      const params = {\n        invitedUserIds: ['pubmed-chat', 'wonbae'],\n        // name: \"My Group Channel\",\n        name: \"pubchat\",\n        coverUrl: \"http://example.com/cover.jpg\",\n        operatorUserIds: ['wonbae'],\n        isDistinct: true\n      };\n      try {\n        const channel = await this.sb.groupChannel.createChannel(params);\n        this.channel = channel; // Set the current channel context\n        this.initializeMessageCollection(channel);\n        // console.log(\"Successfully set this.channel to the newly created group channel.\");\n      } catch (error) {\n        console.error(\"Error creating group channel:\", error);\n      }\n    };\n    this.sendMessage = async (textMessage, customType = '', data = '') => {\n      if (!this.channel) {\n        console.error('Channel is not defined.');\n        return;\n      }\n      const params = {\n        message: textMessage,\n        customType: customType,\n        data: data\n      };\n      try {\n        this.channel.sendUserMessage(params).onSucceeded(({\n          messageId,\n          message,\n          createdAt,\n          sender: {\n            userId,\n            nickname\n          }\n        }) => {\n          const formattedMessage = {\n            messageId,\n            message,\n            userId,\n            createdAt,\n            sender: {\n              userId,\n              nickname\n            }\n          };\n        }).onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n      } catch (error) {\n        console.error(\"Send Message Error:\", error);\n      }\n    };\n    this.initializeMessageCollection = async channel => {\n      const filter = new MessageFilter();\n      const limit = 100;\n      const startingPoint = Date.now();\n      const messageCollection = channel.createMessageCollection({\n        filter,\n        limit,\n        startingPoint\n      });\n      const handler = {\n        onMessagesAdded: (context, channel, messages) => {\n          this.setState(prevState => ({\n            messages: [...prevState.messages, ...messages]\n          }));\n        },\n        onMessagesUpdated: (context, channel, messages) => {\n          // Logic to update messages in state\n        },\n        onMessagesDeleted: (context, channel, messageIds) => {\n          // Logic to remove messages from state\n        },\n        onChannelUpdated: (context, channel) => {\n          this.setState({\n            channel,\n            typingMembers: channel.getTypingUsers()\n          });\n        },\n        onChannelDeleted: (context, channelUrl) => {\n          // Clear chat view or update state as needed\n        },\n        onHugeGapDetected: () => {\n          // Handle huge gap detected event\n        }\n      };\n      messageCollection.setMessageCollectionHandler(handler);\n      await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API).onCacheResult((err, messages) => {\n        // console.log(\"Cache result:\", messages);\n        if (!err) {\n          this.setState({\n            messages: messages.reverse()\n          }); // Assuming messages are added to state in reverse order for display\n        } else {\n          console.error(\"Error retrieving messages from cache:\", err);\n        }\n      }).onApiResult((err, messages) => {\n        if (!err) {\n          this.setState({\n            messages: messages.reverse()\n          }); // Update state with latest messages\n        } else {\n          console.error(\"Error retrieving messages from API:\", err);\n        }\n      });\n      this.setState({\n        messageCollection\n      });\n      console.log(\"MessageCollection initialized for channel:\", channel);\n    };\n    this.loadPreviousMessages = async () => {\n      const {\n        messageCollection\n      } = this.state;\n      if (messageCollection && messageCollection.hasPrevious) {\n        console.log(\"Loading previous messages\");\n        const messages = await messageCollection.loadPrevious();\n        console.log(\"Previous messages loaded:\", messages);\n        this.setState(prevState => ({\n          messages: [...messages.reverse(), ...prevState.messages] // Prepend older messages\n        }));\n      } else {\n        console.log(\"No previous messages to load or MessageCollection not initialized\");\n      }\n    };\n    this.state = {\n      messages: [],\n      channel: null,\n      channelType: null,\n      userId: '',\n      isConnected: false,\n      messageCollection: null\n    };\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new GroupChannelModule()]\n    });\n  }\n  renderChannelTypeSelection() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          channelType: 'group'\n        }, this.createGroupChannel),\n        children: \"Group Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    const {\n      isConnected,\n      channel,\n      channelType,\n      messages,\n      userId,\n      typingMembers\n    } = this.state;\n    console.log(typingMembers, 'members');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), !isConnected && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter user ID\",\n          value: userId,\n          onChange: this.handleUserIdChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: this.handleLogin,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), isConnected && !channelType && this.renderChannelTypeSelection(), isConnected && channelType && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n          channel: channel,\n          sendMessage: this.sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), (typingMembers === null || typingMembers === void 0 ? void 0 : typingMembers.length) > 0 && typingMembers.map(member => {\n          return member.nickname;\n        })]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","GroupChannelModule","MessageFilter","MessageCollectionInitPolicy","GroupChannelHandler","Title","MessageList","SendMessageForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","handleUserIdChange","event","setState","userId","target","value","handleLogin","e","preventDefault","state","trim","sb","connect","isConnected","error","console","connectToSenbird","createGroupChannel","params","invitedUserIds","name","coverUrl","operatorUserIds","isDistinct","channel","groupChannel","createChannel","initializeMessageCollection","sendMessage","textMessage","customType","data","message","sendUserMessage","onSucceeded","messageId","createdAt","sender","nickname","formattedMessage","onFailed","filter","limit","startingPoint","Date","now","messageCollection","createMessageCollection","handler","onMessagesAdded","context","messages","prevState","onMessagesUpdated","onMessagesDeleted","messageIds","onChannelUpdated","typingMembers","getTypingUsers","onChannelDeleted","channelUrl","onHugeGapDetected","setMessageCollectionHandler","initialize","CACHE_AND_REPLACE_BY_API","onCacheResult","err","reverse","onApiResult","log","loadPreviousMessages","hasPrevious","loadPrevious","channelType","init","appId","modules","renderChannelTypeSelection","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","render","className","onSubmit","type","placeholder","onChange","length","map","member"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { GroupChannelModule,  MessageFilter, MessageCollectionInitPolicy, GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      channel: null,\n      channelType: null,\n      userId: '', \n      isConnected: false,\n      messageCollection: null,  \n    };\n\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new GroupChannelModule()],\n    });\n  }\n\n  handleUserIdChange = (event) => {\n    this.setState({ userId: event.target.value });\n  };\n\n  handleLogin = async (e) => {\n    e.preventDefault();\n    const { userId } = this.state;\n    if (userId.trim()) {\n      try {\n        await this.sb.connect(userId);\n        this.setState({ isConnected: true });\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    }\n  };\n\n  connectToSenbird = async (userId) => {\n    try {\n      await this.sb.connect(userId);\n      // ... after successful connection\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  createGroupChannel = async () => {\n    const params = {\n      invitedUserIds: ['pubmed-chat','wonbae'], \n      // name: \"My Group Channel\",\n      name: \"pubchat\",\n      coverUrl: \"http://example.com/cover.jpg\",\n      operatorUserIds: ['wonbae'], \n      isDistinct: true,\n    };\n  \n    try {\n      const channel = await this.sb.groupChannel.createChannel(params);\n      this.channel = channel; // Set the current channel context\n      this.initializeMessageCollection(channel);\n      // console.log(\"Successfully set this.channel to the newly created group channel.\");\n    } catch (error) {\n      console.error(\"Error creating group channel:\", error);\n    }\n  };\n  \n\n  sendMessage = async (textMessage, customType = '', data = '') => {\n    if (!this.channel) {\n      console.error('Channel is not defined.');\n      return;\n    }\n\n    const params = {\n      message: textMessage,\n      customType: customType,\n      data: data,\n    };\n\n    try {\n      this.channel.sendUserMessage(params)\n        .onSucceeded(({messageId, message, createdAt, sender: {userId, nickname}}) => {\n      \n          const formattedMessage = {\n            messageId,\n            message,\n            userId,\n            createdAt,\n            sender: {\n              userId,\n              nickname\n            },\n          };\n        })\n        .onFailed((error, message) => {\n          console.error(\"Failed to send message:\", error);\n        });\n    } catch (error) {\n      console.error(\"Send Message Error:\", error);\n    }\n  };\n\n  renderChannelTypeSelection() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ channelType: 'group' }, this.createGroupChannel)}>Group Channel</button>\n      </div>\n    );\n  }\n\n  initializeMessageCollection = async (channel) => {\n    \n    const filter = new MessageFilter();\n    const limit = 100;\n    const startingPoint = Date.now();\n    const messageCollection = channel.createMessageCollection({\n      filter,\n      limit,\n      startingPoint,\n    });\n\n    const handler = {\n      onMessagesAdded: (context, channel, messages) => {\n          this.setState(prevState => ({\n              messages: [...prevState.messages, ...messages]\n          }));\n      },\n      onMessagesUpdated: (context, channel, messages) => {\n          // Logic to update messages in state\n      },\n      onMessagesDeleted: (context, channel, messageIds) => {\n          // Logic to remove messages from state\n      },\n  \n      onChannelUpdated: (context, channel) => {\n        this.setState({channel, typingMembers: channel.getTypingUsers()});\n      },\n      onChannelDeleted: (context, channelUrl) => {\n          // Clear chat view or update state as needed\n      },\n      onHugeGapDetected: () => {\n          // Handle huge gap detected event\n      }\n  };\n\n    messageCollection.setMessageCollectionHandler(handler);\n\n\n  \n    await messageCollection.initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n      .onCacheResult((err, messages) => {\n        // console.log(\"Cache result:\", messages);\n        if (!err) {\n          this.setState({ messages: messages.reverse() }); // Assuming messages are added to state in reverse order for display\n        } else {\n          console.error(\"Error retrieving messages from cache:\", err);\n        }\n      })\n      .onApiResult((err, messages) => {\n        if (!err) {\n          this.setState({ messages: messages.reverse() }); // Update state with latest messages\n        } else {\n          console.error(\"Error retrieving messages from API:\", err);\n        }\n      });\n  \n    this.setState({ messageCollection });\n  \n    console.log(\"MessageCollection initialized for channel:\", channel);\n  };\n  \n  loadPreviousMessages = async () => {\n    const { messageCollection } = this.state;\n    if (messageCollection && messageCollection.hasPrevious) {\n      console.log(\"Loading previous messages\");\n      const messages = await messageCollection.loadPrevious();\n      console.log(\"Previous messages loaded:\", messages);\n      this.setState(prevState => ({\n        messages: [...messages.reverse(), ...prevState.messages], // Prepend older messages\n      }));\n    } else {\n      console.log(\"No previous messages to load or MessageCollection not initialized\");\n    }\n  };\n\n  render() {\n    const { isConnected, channel, channelType, messages, userId, typingMembers } = this.state;\n    console.log(typingMembers, 'members');\n    return (\n      <div className=\"app\">\n        <Title />\n        {!isConnected && (\n          <form onSubmit={this.handleLogin}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter user ID\"\n              value={userId}\n              onChange={this.handleUserIdChange}\n            />\n            <button type=\"submit\" onClick={this.handleLogin}>Login</button>\n          </form>\n        )}\n        {isConnected && !channelType && this.renderChannelTypeSelection()}\n        {isConnected && channelType && (\n          <>\n            <MessageList messages={messages} />\n            <SendMessageForm channel={channel} sendMessage={this.sendMessage} />\n            {typingMembers?.length > 0 && typingMembers.map((member) => {\n              return member.nickname\n            })}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}