{"ast":null,"code":"import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule, GroupChannelModule, GroupChannelFilter, GroupChannelCollection, GroupChannelListOrder } from '@sendbird/chat';\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nclass App extends Component {\n  constructor() {\n    super();\n    this.connectToSenbird = async userId => {\n      try {\n        await this.sb.connect(userId);\n        this.fetchOpenChannels();\n        this.initGroupChannelCollection();\n      } catch (error) {\n        console.error('Sendbird Connection Error:', error);\n      }\n    };\n    this.fetchOpenChannels = async () => {\n      const query = this.sb.openChannel.createOpenChannelListQuery();\n      if (query.hasNext) {\n        const channels = await query.next();\n        this.setState({\n          openChannels: channels\n        });\n      }\n    };\n    this.initGroupChannelCollection = () => {\n      const groupChannelFilter = new GroupChannelFilter();\n      groupChannelFilter.includeEmpty = true;\n      const params = {\n        filter: groupChannelFilter,\n        order: GroupChannelListOrder.LATEST_LAST_MESSAGE\n      };\n      this.groupChannelCollection = this.sb.groupChannel.createGroupChannelCollection(params);\n      this.setGroupChannelCollectionHandler();\n\n      // Load initial group channels\n      this.fetchGroupChannels();\n    };\n    this.fetchGroupChannels = async () => {\n      if (this.groupChannelCollection.hasMore) {\n        const channels = await this.groupChannelCollection.loadMore();\n        this.setState({\n          groupChannels: channels\n        });\n      }\n    };\n    this.setGroupChannelCollectionHandler = () => {\n      const handler = {\n        onChannelsAdded: (context, channels) => {\n          this.setState(prevState => ({\n            groupChannels: [...prevState.groupChannels, ...channels]\n          }));\n        },\n        onChannelsUpdated: (context, channels) => {\n          // Update channels in state\n        },\n        onChannelsDeleted: (context, channelUrls) => {\n          // Remove channels from state\n        }\n      };\n      this.groupChannelCollection.setGroupChannelCollectionHandler(handler);\n    };\n    this.state = {\n      messages: [],\n      openChannels: [],\n      groupChannels: [],\n      showChannelList: false,\n      channelType: null // 'open' or 'group', null until selected\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()]\n    });\n  }\n  async componentDidMount() {\n    await this.connectToSenbird('wonbae');\n  }\n  componentWillUnmount() {\n    if (this.groupChannelCollection) {\n      this.groupChannelCollection.dispose();\n    }\n  }\n\n  //... existing methods including createOpenChannel, createGroupChannel, sendMessage, renderChannelList, renderChannelTypeSelection, etc.\n\n  render() {\n    //... existing render method\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","SendbirdChat","OpenChannelModule","GroupChannelModule","GroupChannelFilter","GroupChannelCollection","GroupChannelListOrder","Title","MessageList","SendMessageForm","App","constructor","connectToSenbird","userId","sb","connect","fetchOpenChannels","initGroupChannelCollection","error","console","query","openChannel","createOpenChannelListQuery","hasNext","channels","next","setState","openChannels","groupChannelFilter","includeEmpty","params","filter","order","LATEST_LAST_MESSAGE","groupChannelCollection","groupChannel","createGroupChannelCollection","setGroupChannelCollectionHandler","fetchGroupChannels","hasMore","loadMore","groupChannels","handler","onChannelsAdded","context","prevState","onChannelsUpdated","onChannelsDeleted","channelUrls","state","messages","showChannelList","channelType","init","appId","modules","componentDidMount","componentWillUnmount","dispose","render"],"sources":["/Users/wsuh/Code/my-chat-app/src/components/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { OpenChannelModule, GroupChannelModule, GroupChannelFilter, GroupChannelCollection, GroupChannelListOrder } from '@sendbird/chat';\n\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      openChannels: [],\n      groupChannels: [],\n      showChannelList: false,\n      channelType: null, // 'open' or 'group', null until selected\n    };\n    // Initialize Sendbird Chat SDK\n    this.sb = SendbirdChat.init({\n      appId: '24C7F7B1-B8F1-43FF-96BE-797B57528110',\n      modules: [new OpenChannelModule(), new GroupChannelModule()],\n    });\n  }\n\n  async componentDidMount() {\n    await this.connectToSenbird('wonbae');\n  }\n\n  connectToSenbird = async (userId) => {\n    try {\n      await this.sb.connect(userId);\n      this.fetchOpenChannels();\n      this.initGroupChannelCollection();\n    } catch (error) {\n      console.error('Sendbird Connection Error:', error);\n    }\n  };\n\n  fetchOpenChannels = async () => {\n    const query = this.sb.openChannel.createOpenChannelListQuery();\n    if (query.hasNext) {\n      const channels = await query.next();\n      this.setState({ openChannels: channels });\n    }\n  };\n\n  initGroupChannelCollection = () => {\n    const groupChannelFilter = new GroupChannelFilter();\n    groupChannelFilter.includeEmpty = true;\n\n    const params = {\n      filter: groupChannelFilter,\n      order: GroupChannelListOrder.LATEST_LAST_MESSAGE,\n    };\n\n    this.groupChannelCollection = this.sb.groupChannel.createGroupChannelCollection(params);\n    this.setGroupChannelCollectionHandler();\n\n    // Load initial group channels\n    this.fetchGroupChannels();\n  };\n\n  fetchGroupChannels = async () => {\n    if (this.groupChannelCollection.hasMore) {\n      const channels = await this.groupChannelCollection.loadMore();\n      this.setState({ groupChannels: channels });\n    }\n  };\n\n  setGroupChannelCollectionHandler = () => {\n    const handler = {\n      onChannelsAdded: (context, channels) => {\n        this.setState(prevState => ({\n          groupChannels: [...prevState.groupChannels, ...channels]\n        }));\n      },\n      onChannelsUpdated: (context, channels) => {\n        // Update channels in state\n      },\n      onChannelsDeleted: (context, channelUrls) => {\n        // Remove channels from state\n      },\n    };\n    this.groupChannelCollection.setGroupChannelCollectionHandler(handler);\n  };\n\n  componentWillUnmount() {\n    if (this.groupChannelCollection) {\n      this.groupChannelCollection.dispose();\n    }\n  }\n\n  //... existing methods including createOpenChannel, createGroupChannel, sendMessage, renderChannelList, renderChannelTypeSelection, etc.\n\n  render() {\n    //... existing render method\n  }\n}\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,iBAAiB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,sBAAsB,EAAEC,qBAAqB,QAAQ,gBAAgB;AAEzI,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,MAAMC,GAAG,SAASV,SAAS,CAAC;EAC1BW,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KAmBVC,gBAAgB,GAAG,MAAOC,MAAM,IAAK;MACnC,IAAI;QACF,MAAM,IAAI,CAACC,EAAE,CAACC,OAAO,CAACF,MAAM,CAAC;QAC7B,IAAI,CAACG,iBAAiB,CAAC,CAAC;QACxB,IAAI,CAACC,0BAA0B,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAAA,KAEDF,iBAAiB,GAAG,YAAY;MAC9B,MAAMI,KAAK,GAAG,IAAI,CAACN,EAAE,CAACO,WAAW,CAACC,0BAA0B,CAAC,CAAC;MAC9D,IAAIF,KAAK,CAACG,OAAO,EAAE;QACjB,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,CAAC;QACnC,IAAI,CAACC,QAAQ,CAAC;UAAEC,YAAY,EAAEH;QAAS,CAAC,CAAC;MAC3C;IACF,CAAC;IAAA,KAEDP,0BAA0B,GAAG,MAAM;MACjC,MAAMW,kBAAkB,GAAG,IAAIxB,kBAAkB,CAAC,CAAC;MACnDwB,kBAAkB,CAACC,YAAY,GAAG,IAAI;MAEtC,MAAMC,MAAM,GAAG;QACbC,MAAM,EAAEH,kBAAkB;QAC1BI,KAAK,EAAE1B,qBAAqB,CAAC2B;MAC/B,CAAC;MAED,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACpB,EAAE,CAACqB,YAAY,CAACC,4BAA4B,CAACN,MAAM,CAAC;MACvF,IAAI,CAACO,gCAAgC,CAAC,CAAC;;MAEvC;MACA,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC3B,CAAC;IAAA,KAEDA,kBAAkB,GAAG,YAAY;MAC/B,IAAI,IAAI,CAACJ,sBAAsB,CAACK,OAAO,EAAE;QACvC,MAAMf,QAAQ,GAAG,MAAM,IAAI,CAACU,sBAAsB,CAACM,QAAQ,CAAC,CAAC;QAC7D,IAAI,CAACd,QAAQ,CAAC;UAAEe,aAAa,EAAEjB;QAAS,CAAC,CAAC;MAC5C;IACF,CAAC;IAAA,KAEDa,gCAAgC,GAAG,MAAM;MACvC,MAAMK,OAAO,GAAG;QACdC,eAAe,EAAEA,CAACC,OAAO,EAAEpB,QAAQ,KAAK;UACtC,IAAI,CAACE,QAAQ,CAACmB,SAAS,KAAK;YAC1BJ,aAAa,EAAE,CAAC,GAAGI,SAAS,CAACJ,aAAa,EAAE,GAAGjB,QAAQ;UACzD,CAAC,CAAC,CAAC;QACL,CAAC;QACDsB,iBAAiB,EAAEA,CAACF,OAAO,EAAEpB,QAAQ,KAAK;UACxC;QAAA,CACD;QACDuB,iBAAiB,EAAEA,CAACH,OAAO,EAAEI,WAAW,KAAK;UAC3C;QAAA;MAEJ,CAAC;MACD,IAAI,CAACd,sBAAsB,CAACG,gCAAgC,CAACK,OAAO,CAAC;IACvE,CAAC;IA1EC,IAAI,CAACO,KAAK,GAAG;MACXC,QAAQ,EAAE,EAAE;MACZvB,YAAY,EAAE,EAAE;MAChBc,aAAa,EAAE,EAAE;MACjBU,eAAe,EAAE,KAAK;MACtBC,WAAW,EAAE,IAAI,CAAE;IACrB,CAAC;IACD;IACA,IAAI,CAACtC,EAAE,GAAGb,YAAY,CAACoD,IAAI,CAAC;MAC1BC,KAAK,EAAE,sCAAsC;MAC7CC,OAAO,EAAE,CAAC,IAAIrD,iBAAiB,CAAC,CAAC,EAAE,IAAIC,kBAAkB,CAAC,CAAC;IAC7D,CAAC,CAAC;EACJ;EAEA,MAAMqD,iBAAiBA,CAAA,EAAG;IACxB,MAAM,IAAI,CAAC5C,gBAAgB,CAAC,QAAQ,CAAC;EACvC;EA4DA6C,oBAAoBA,CAAA,EAAG;IACrB,IAAI,IAAI,CAACvB,sBAAsB,EAAE;MAC/B,IAAI,CAACA,sBAAsB,CAACwB,OAAO,CAAC,CAAC;IACvC;EACF;;EAEA;;EAEAC,MAAMA,CAAA,EAAG;IACP;EAAA;AAEJ;AAEA,eAAejD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}